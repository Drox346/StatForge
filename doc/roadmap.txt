1.0:

#	Main Topics
[ ] 1	Public API freeze                 Finalise names, headers, semantics, add header docs
[X] 2	Dependency validation             Unknown-ref + cycle detection inside setCellDependencies (rollback on error?)
[ ] 3	Bulk-import helpers               reserveCells(n) pre-sizes maps, createFormulaCellsBulk() parses/wires thousands of formulas in one pass
[ ] 4	Intrinsic registry                Host registers name -> λ(span<double>) before any parse (e.g. sqrt, clamp, pow, abs, min, max, floor, ceil, round)
[ ] 5	Rule -> Action system             Parse & execute "if <cond> then set <cell> to <expr>" rules; fires during evaluate
[X] 6	PlantUML export                   dumpPlantUml(ostream, showValues) for graph visualisation
[ ] 7	Comprehensive error UX            DslError span bubbles up through Spreadsheet -> UI/CLI
[ ] 8	High-coverage unit tests          Lexer, parser, evaluator, rule engine, cycle check, bulk insert, edge cases
[X] 9	Duplicate-dependency eliminator   Auto-dedupe <A> + <A> lists at wiring time
[ ] 10	Execution metrics                 Per sheet struct: last eval ms/μs, cells visited, dirty leaf count
[ ] 11	Memory / ASan                     clean build, document MB per-cell baseline
[ ] 12	Docs & examples	                  README: introduction, goals, quick-start, example stat dependency tree, performance tests, best practices, avoiding pitfalls, how to contribute
[ ] 13	Packaging                         cmake --install, vcpkg / conan ports
[ ] 14	CI matrix                         GitHub Actions: linux & windows release builds + tests + perf budget gate
[ ] 15	Optional: trace(cellId) helper    Return ordered list of formulas touched while resolving a cell (debug aid)
[ ] 16  Cpp Modules                       Changing c++ headers to c++23 modules
[ ] 17  undo()/revertTo()                 Adding an action stack and action ID. Allow reversing actions or even set to specific action ID. Config Struct to configure action stack size

#   Minor Tasks/ToDo
- DSL "%" for fmod
- bool() func, approx for all comparison operators, 1e-14 > val > -1e-14 -> false
- isDirty(id) api
- puml dump specific cell + max depth (-1 default)
- puml "legend right" to create a legend
- puml formula field if formula cell
- puml links
- proper guard rails for different cell types for functions like setValue, setFormula, add/remove dependency
- rewriting evaluation logic to automatically use recursive and switch to iterative if recursion is too deep
- store DSL of cell formulas, allow parser to create proper error msg when DSL error is encountered

1.1:
Persistence, save/load of compiled sheets
Support for more functions like exp, log, frac, sin, cos, min, max, clamp etc
Safe-math toggles (divide-by-zero clamp, pow overflow)
Advanced progress callbacks / UI bars
Byte-code VM revisit & further tuning